{"version":3,"sources":["components/form/DataForm.js","components/fields/RenderButtonGroup.js","components/fields/RenderSelectField.js","components/form/Greeter.js","components/fields/RenderSearchField.js","components/form/SubmissionInfo.js","components/form/Summary.js","components/form/index.js","pages/public/Form.js"],"names":["DataForm","state","fetch","process","method","crossDomain","headers","then","response","ok","json","greetingItems","setState","data","catch","err","console","log","this","Grid","length","Box","pt","pb","pl","pr","item","xs","Typography","variant","initialValues","name","render","arrayHelpers","Object","values","map","greeting_entry","index","key","dateToString","Date","createdAt","toLocaleDateString","toString","timeTo24hString","toLocaleString","greeting","React","Component","makeStyles","theme","button","boxShadow","buttonError","borderColor","palette","error","main","RenderSelectField","field","value","fieldRest","form","label","options","props","touched","errors","TextField","select","fullWidth","inputProps","displayEmpty","MenuItem","disabled","option","Greeter","root","paddingRight","iconButton","paddingLeft","paddingTop","paddingBottom","borderTopRightRadius","borderBottomRightRadius","backgroundColor","primary","borderRadius","searchIcon","color","isDisabled","submitLoading","submitError","useFormikContext","container","spacing","md","component","justify","type","loading","size","text","useStyles","card","height","display","alignItems","justifyContent","statusIcon","marginRight","SubmissionInfo","id","lastest_greeting","classes","className","align","paragraph","Summary","gutterBottom","Form","history","useHistory","useState","setSubmitLoading","setSubmitError","formValues","handleSubmit","a","modifiedValues","handleSubmission","body","JSON","stringify","message","push","Routes","Confirmation","RenderForm","statusText","sm","lg","xl","validationSchema","FormSchema","onSubmit","enableReinitializeprop"],"mappings":"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","file":"static/js/5.58539bf7.chunk.js","sourcesContent":["import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Formik, Form as FormikForm, FieldArray } from 'formik';\nimport { dateToString, timeTo24hString } from '../../utils';\nimport { Card } from '../generic';\nimport { Divider } from '../generic';\n\nclass CustomDataForm extends React.Component {\n  state = {}\n  componentDidMount() {\n    fetch(`${process.env.REACT_APP_API_GW_BASE_URL}/api/v1/greeting/latest`, {\n      method: 'GET',\n      crossDomain:true,\n      headers: { 'Accept': 'application/json', 'Content-type': 'application/json' },\n    }).then((response) =>{\n      if (response.ok) {\n        response.json().then(({greetingItems})=>{\n          // console.log(greetingItems);\n          this.setState({ data: greetingItems });\n        });\n      }\n    }).catch((err)=>console.log(err));\n    \n\n }\n\n render() {\n  if (!this.state.data) {\n    return 'loading...'\n  }\n  // console.log(\"this.state.data:\" + JSON.stringify(this.state.data));\n  return (<Grid>\n    {(0 < this.state.data.length) && (\n    <Box pt={4} pb={4} pl={2} pr={2}>\n    <Card>\n    <Grid item xs={12}>\n    <Typography variant=\"subtitle2\">Previous greeting selections</Typography>\n    <Divider />\n\n    <Formik initialValues={this.state.data}>\n    <FormikForm>\n    <FieldArray\n    name=\"latest_greetings\"\n    render={arrayHelpers => (\n      <table>\n        <tbody>\n          {Object.values(this.state.data).map((greeting_entry, index) => (\n            <tr key={index}>\n            <td>\n              {dateToString((new Date(greeting_entry.createdAt)).toLocaleDateString().toString())}\n            </td>\n            <td>\n              {timeTo24hString((new Date(greeting_entry.createdAt)).toLocaleString().toString())}\n            </td>\n            <td>\n              {greeting_entry.greeting}\n            </td>\n            \n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )}\n  />\n    </FormikForm>\n    </Formik>\n  </Grid>\n    </Card>\n  </Box>\n    )}</Grid>\n  )\n }\n};\n\n\nexport const DataForm = CustomDataForm;\n\n","import React, { Fragment } from 'react';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport classNames from 'classnames';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ErrorMessage, useField } from 'formik';\n\nimport { InputFieldError, Button } from '../generic';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    // padding: theme.spacing(2),\n    boxShadow: 'none',\n  },\n  buttonError: {\n    borderColor: theme.palette.error.main,\n    '&:hover': {\n      borderColor: theme.palette.error.main,\n    },\n  },\n}));\n\nconst RenderButtonGroup = ({\n  field,\n  form,\n  options,\n  ...props\n}) => {\n  const classes = useStyles();\n  const [, , helpers] = useField(field.name);\n  const { setValue } = helpers;\n  const error = form.errors[field.name];\n  return (\n    <Fragment>\n      <ButtonGroup\n        orientation=\"vertical\"\n        fullWidth\n        {...props}\n      >\n        {options.map((option) => (\n          <Button\n            className={classNames(classes.button, { [classes.buttonError]: !!error })}\n            key={option.value}\n            onClick={() => setValue(option.value)}\n            variant={(option.value === field.value) ? 'contained' : 'outlined'}\n            color={(option.value === field.value) ? option.color : 'primary'}\n            text={option.label}\n          />\n        ))}\n      </ButtonGroup>\n      <InputFieldError error={<ErrorMessage name={field.name} />} />\n    </Fragment>\n  );\n};\n\nexport { RenderButtonGroup };\n","import React, { Fragment } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { ErrorMessage } from 'formik';\n\nimport { InputFieldError, InputFieldLabel } from '../generic';\n\nconst RenderSelectField = ({\n  field: { value, ...fieldRest },\n  form,\n  label,\n  options,\n  ...props\n}) => {\n  const touched = form.touched[fieldRest.name];\n  const error = form.errors[fieldRest.name];\n  return (\n    <Fragment>\n      {label && <InputFieldLabel label={label} />}\n      <TextField\n        select\n        fullWidth\n        variant=\"filled\"\n        error={touched && !!error}\n        inputProps={{ displayEmpty: true }}\n        value={value || ''}\n        {...fieldRest}\n        {...props}\n      >\n        <MenuItem value=\"\" disabled>Please Select</MenuItem>\n        {options.map((option) => (\n          <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>\n        ))}\n      </TextField>\n      <InputFieldError error={<ErrorMessage name={fieldRest.name} />} />\n    </Fragment>\n  );\n};\n\nexport { RenderSelectField };\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { Field, useFormikContext } from 'formik';\n\nimport { Divider } from '../generic';\nimport { RenderSelectField } from '../fields';\nimport { Button } from '../generic';\n\nconst Greeter = ({ isDisabled, submitLoading, submitError }) => {\n  const { values } = useFormikContext();\n  return (\n    <Grid item xs={12}>\n      <Grid container spacing={2}>\n\n        {/** Title */}\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle1\">Select your favorite greeting</Typography>\n          <Divider />\n        </Grid>\n\n        {/** Greeting */}\n        <Grid item xs={12} md={6}>\n          <Field\n            name=\"greeting\"\n            component={RenderSelectField}\n            label=\"* Favorite Greeting\"\n            disabled={isDisabled}\n            options={[\n              { value: 'Aloha', label: 'Aloha' },\n              { value: 'Bonjour', label: 'Bonjour' },\n              { value: 'Greetings and salutations', label: 'Greetings and salutations' },\n              { value: 'Hello', label: 'Hello' },\n              { value: 'Howdy', label: 'Howdy' },\n              { value: 'Konichiwa', label: 'Konichiwa' },\n            ]}\n          />\n        </Grid>\n\n        {/** Submit */}\n        <Grid item xs={12}>\n          <Grid container justify=\"center\">\n            <Grid item xs={8}>\n              <Button\n                type=\"submit\"\n                loading={submitLoading}\n                disabled={'' === values.greeting}\n                size=\"large\"\n                text=\"Submit\"\n              />\n\n              {/** Submit Error */}\n              {submitError && (\n                <Box pt=\"1rem\">\n                  <Typography variant=\"body1\" color=\"error\">{submitError}</Typography>\n                </Box>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\n\nexport { Greeter };\n","import React, { Fragment } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { RenderTextField } from '.';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > .MuiOutlinedInput-adornedEnd': {\n      paddingRight: '0',\n    },\n  },\n  iconButton: {\n    paddingLeft: '10px',\n    paddingRight: '10px',\n    paddingTop: '9px',\n    paddingBottom: '9px',\n    borderTopRightRadius: '4px',\n    borderBottomRightRadius: '4px',\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: 0,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.main,\n    },\n  },\n  searchIcon: {\n    color: '#FFFFFF',\n  },\n}));\n\nconst RenderSearchField = ({\n  ...props\n}) => {\n  const classes = useStyles();\n  return (\n    <Fragment>\n      <RenderTextField\n        className={classes.root}\n        variant=\"outlined\"\n        InputProps={{\n          endAdornment: (\n            <IconButton\n              centerRipple={false}\n              className={classes.iconButton}\n              color=\"inherit\"\n              type=\"submit\"\n            >\n              <SearchIcon className={classes.searchIcon} />\n            </IconButton>\n          ),\n        }}\n        {...props}\n      />\n    </Fragment>\n  );\n};\n\nexport { RenderSearchField };\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Card } from '../generic';\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    height: '123px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  statusIcon: {\n    height: '48px',\n    marginRight: theme.spacing(2),\n  },\n}));\n\nconst SubmissionInfo = ({ id, lastest_greeting}) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={4}>\n      <Grid xs={12} md={6} item>\n        <Card className={classes.card}>\n          <div>\n            <Typography component=\"p\" align=\"center\" variant=\"overline\" paragraph>Greeting Selection</Typography>\n            <Typography align=\"center\" variant=\"h1\" color=\"primary\">{id}</Typography>\n          </div>\n        </Card>\n      </Grid>\n      <Grid xs={12} md={6} item>\n        <Card className={classes.card}>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">{lastest_greeting}</Typography>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport { SubmissionInfo };\n","import React, { Fragment } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Summary = () => {\n  return (\n    <Fragment>\n      <Typography variant=\"h2\" color=\"primary\" gutterBottom>\n        Simple Demo App\n      </Typography>\n      <Typography variant=\"body1\" paragraph>\n        In order to get you started in your journey, we've provided you a small demonstration app.\n        It consists of a database and a form.  In the form below, pick your favorite greeting and see\n        it reflected here.\n      </Typography>\n    </Fragment>\n  );\n};\n\nexport { Summary };\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { Formik, Form as FormikForm } from 'formik';\nimport { useHistory } from 'react-router-dom';\n\nimport { Routes, FormSchema } from '../../constants';\nimport { handleSubmission } from '../../utils';\n\nimport { Card } from '../generic';\nimport { DataForm } from './DataForm';\nimport { Greeter } from './Greeter';\nimport { SubmissionInfo } from './SubmissionInfo';\nimport { Summary } from './Summary';\n\nconst Form = ({ initialValues = null, isDisabled}) => {\n  const history = useHistory();\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  let formValues = initialValues ? initialValues : {\n    greeting: '',\n  };\n\n  const handleSubmit = async (values) => {\n    setSubmitLoading(true);\n    const modifiedValues = handleSubmission(values);\n    const response = await fetch(`${process.env.REACT_APP_API_GW_BASE_URL}/api/v1/greeting`, {\n      method: 'POST',\n      crossDomain:true,\n      headers: { 'Accept': 'application/json', 'Content-type': 'application/json' },\n      body: JSON.stringify({ ...modifiedValues }),\n    });\n    setSubmitLoading(false);\n    if (response.ok) {\n      const { id, greeting, error } = await response.json();\n      if (error) {\n        setSubmitError(error.message || 'Failed to submit this form');\n      } else {\n        history.push(Routes.Confirmation, { id, greeting });\n        const formValues = initialValues ? initialValues : {\n          id: id,\n          greeting: greeting,\n        };\n        // console.log(formValues.greeting);\n        return RenderForm({formValues, isDisabled, submitLoading, submitError, handleSubmit});\n      }\n    } else {\n      setSubmitError(response.error || response.statusText || 'Server error');\n    }\n  };\n  return RenderForm({formValues, isDisabled, submitLoading, submitError, handleSubmit});\n};\n\nconst RenderForm = ({ formValues = null, isDisabled, submitLoading, submitError, handleSubmit=()=>{} }) => {\n  return (\n    <Grid item xs={12} sm={isDisabled ? 12 : 11} md={isDisabled ? 12 : 10} lg={isDisabled ? 12 : 8} xl={isDisabled ? 12 : 6}>\n\n      {isDisabled && formValues && (\n        <Box pl={2} pr={2} pb={3}>\n          <SubmissionInfo id={formValues.id} lastest_greeting={formValues.greeting} />\n        </Box>\n      )}\n\n      {!isDisabled && (\n        <Box pt={4} pb={4} pl={2} pr={2}>\n          <Summary />\n        </Box>\n      )}\n\n      <Box pl={2} pr={2}>\n        <Card>\n          <Formik\n            initialValues={formValues}\n            validationSchema={FormSchema}\n            onSubmit={handleSubmit}\n            enableReinitializeprop={true}\n          >\n            <FormikForm>\n              <Grid container spacing={2}>\n                {!isDisabled && <Greeter submitLoading={submitLoading} submitError={submitError} />}\n              </Grid>\n            </FormikForm>\n          </Formik>\n        </Card>\n      </Box>\n\n      <DataForm />\n      \n    </Grid>\n  );\n};\n\nexport { Form };\n","import React from 'react';\n\nimport { Page } from '../../components/generic';\nimport { Form } from '../../components/form';\n\nexport default () => {\n  return (\n    <Page>\n      <Form />\n    </Page>\n  );\n};\n"],"sourceRoot":""}